/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

/**
 * A classLibrary that contains the methods for Arrays, Loops, Imports, ArrayLists lab.
 */
public class Library {

    public boolean someLibraryMethod() {
        return true;
    }

    /**
     * A method called that returns true or false depending on whether the array contains
     * duplicate values.
     *
     * @param rolls the rolls
     * @return the int [ ]
     */
    public int[] diceRoll(int rolls) {
        int[] arr = new int[rolls];
        Random rand = new Random();

        for (int i = 0; i < rolls; i++) {
            arr[i] = rand.nextInt(6);
        }
        return arr;
    }

    /**
     * A method that returns true if array contains duplicates otherwise false.
     *
     * @param inputArray the input array
     * @return the boolean
     */
    public boolean containsDuplicates(int[] inputArray) {
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = 0; j < inputArray.length; i++) {
                if (i != j) {
                    return true;
                }
            }
        }
        return false;
    }


    /**
     * A method that accepts an array of integers and calculates and returns the average of all the values in the array.
     *
     * @param inputArray the input array
     */
    public int calculateAverage(int[] inputArray) {

        int temp = 0;
        for (int i = 0; i < inputArray.length; i++) {
            temp += inputArray[i];
        }

        int average = temp / inputArray.length;

        return average;
    }


    /**
     * Calculate the average value for each array and return the array with the lowest average, using the
     * calculateAverage method above
     *
     * @param array of arrays
     * @return int[] array with lowest average
     */
    public int[] lowestAverage(int[][] inputArray) {

        //calculate the first array and store as a value to compare later.
        int calculatedAverageArray = calculateAverage(inputArray[0]);
        int avg = 0;
        int lowest = 0;

        if(inputArray.length ==0){
            throw new IllegalArgumentException("Cannot find lowest average of an empty array");
        }

        // Loops through each inner array
        for (int i = 0; i < inputArray.length; i++) {
            avg = calculateAverage(inputArray[i]);

            if (avg < calculatedAverageArray) {
                calculatedAverageArray = avg;
                lowest = i;

            }
        }

        return inputArray[lowest];
    }

    /**
     * This method accepts an array and prints the min, max, and within the range print out not seen values.
     *
     * @param inputArray the input array
     */
    public void weatherData(int[][] inputArray){

        HashSet<Integer> hashSet = new HashSet<>();

        for(int i = 0; i < inputArray.length ; i++){
            for (int item : inputArray[i]) {
                hashSet.add(item);
            }
        }

        System.out.println("The min temp is " + Collections.min(hashSet));
        System.out.println("The max temp is " + Collections.max(hashSet));

        int min = Collections.min(hashSet);
        int max = Collections.max(hashSet);

        for(int i = min; i< max; i++) {
            if (!hashSet.contains(i)) {
                System.out.println("Never Seen: " + i);
            }
        }
    }

    /**
     * This method accepts a list of strings and returns one string to show what got the most votes
     *
     * @return the string that represents the most votes.
     */
    public String tally(List<String> list){
        int max = 0;
        String mostVotes = "";

        HashMap<String, Integer> hashMap = new HashMap<>();

        for(String element: list){
            hashMap.put(element, 0);
        }

        for(String element: list){
            if(hashMap.get(element) > max){
                max = hashMap.get(element) + 1;
                mostVotes = element;
            }
            else{
                hashMap.put(element, hashMap.get(element) + 1);
            }
        }
        return mostVotes;
    }

}
